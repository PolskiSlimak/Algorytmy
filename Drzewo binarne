#include <iostream>

using namespace std;

struct node { // tworzymy strukture
    int data;
    node* left;
    node* right;
};
void add (int data, node*& tree){                       // MOZE TAK BEDZIE CZYTELNIEJSZE IDK    
    node* fresh = new node;                             // tworzymy nowa strukture gdzie mozemy wsadzić nasze wartosci
    fresh->data = data;                                 // przekazujemy wartosc do wartosci
    fresh->left = NULL;                                 // ustawiamy galezie  na null iż nie wiemy co bedzie po prawej lub lewej stronie
    fresh->right = NULL;                                // same
    if(tree != NULL){                                   // spprawdzamy czy drzewo jest puuste ten przyapdek rozpatruje ze nie jest puste
        node* prev = tree;                              // zapisujemy poczatek dzrwa aby sie poruszać po nim nie to taki nasz runner albo helper 
        while(prev != NULL){                            // dopoki drzewo nie bedzie wskazywac na nulla
            if(fresh->data >= prev->data){              // jesli wartosc naszego nowego elemetu jest wieksza BADZ ROWNA od KORZENIA/wezla n asteponego to idziemy w prawo
                if(prev->right == NULL){                // teraz sprawdzamy czy jest wartosc obok wezla pusta jesli tak to wprowadzamy za nulla nulla napisujemy tak ?
                    prev->right = fresh;                // to nadpisanie tutaj nastepuje
                    break;                              // wychodzimy
                }else{
                    prev = prev->right;                 // jesli nie natrafilismy napuste lecimy dalej z koxem tak w kolko 
                }
            }else{                                      // tam mielismy wieksze lub = no to tu mniejsze jasna sprawa
                if(prev->left == NULL){                 // TA SAMA ZASAda jak wczesniej nie bede komentowac
                    prev->left = fresh;
                    break;
                }else{
                    prev = prev->left;
                }
            }
        }   
    }else{                                              // nasze drzewo jest puste czyli nasz swtorzony wezel jest na arzie sam
        tree = fresh;
    }
}
/*void add_rec(int data, node*& tree, node* prev=tree){ // dodawanie rekurencyjne czyli jak wiemy to wywolywanie funkcji do warunku
    if(tree == NULL){                                   // jesli ddrzewo nie jest puste (ogolnie w tym tree tkwi nasz korzen z reguly) 
        node* fresh = new node;                         // tworzymy sobie wezeł  on bedzie taki bardziej pomomocniczy zeby żonglować wartościami 
        fresh->data = data;                             // do fresha w miejsce gdzie wchodzi wartosci wkladamy wartosc podana przez "uzytkownika"
        fresh->left = NULL;                             // wskazniki na null bo no dodajemy i nie wiemy co bedzie po prawej czy po lewej    
        fresh->right = NULL;                            // same
        tree = fresh;                                   // no i co mamy nasz korzeń przypisujemy go do tree w sensie wsyztskie wartosci kopiujemy automatycznie
        return;                                         //wychodzimy z if'a ???????????????????????????????????????????????
    }
    node* fresh = new node;                             // a to jezli nie jest puste
    fresh->data = data;                                 // jak wyzej 
    fresh->left = NULL;                                 // same
    fresh->right = NULL;                                // same 
    if(fresh->data >= prev->data){                      // to tak jak wyzej te same zasay   
        if(prev->right == NULL){                        //same
            prev->right = fresh;
            return;
        }else{
            delete fresh;                                 //zastanawiasz sie na kij usuwamy fresha no bo po co nam porownujemy wartosc data i jezeli nie znalezlismy musimy znowu utworzyc nowy node ale przejsc w prawo i znou szukac nulla
            add_rec(data, prev->right);                  // tylko tu jest powtorka funkcji bo nie natrafilismy na null'a
        }
    }else{
        if(prev->left == NULL){
            prev->left = fresh;
            return;
        }else{
            delete fresh;                                  //same TAK MI SIE WYDAJE 
            add_rec(data, prev->left);                    // to samo nie natrafilismy na puste miejsce gałąz i musimy robic az znajdziemy
        }
    }
}*/
void delete_number(int todelete, node*& tree){            //dobre lvl up, usuwanie jest spooko ale w ciul duzo warunków na koniec zostawiam to
    if(tree == NULL){                                      //drezwo puste nie ma co usuwac
        cout << "Drzewo puste"; 
        return;
    }
    if(tree->left == NULL && tree->right == NULL && tree->data == todelete){ 
        tree = NULL;                                        // usuwanie pierwzego elementu na prawo i na lewo od korzenia nic nie ma
        delete tree;                                        // serowanie wyzej nie wiem po co  i usuwanie drzewa pewnie przez jakies wycieki pamieci
        return;                                             // wychodizmy
    }
    node *searcher = tree;                                  //robimy pomocnika ja to nazywa biegaczem ustawiamy na poczatek 
    node* prev = tree;                                      // robimy pomocnoika który bedzie wskazywal na poprzednika 
    while(searcher->data != todelete){                      // dopoki data z biegacza nie bedzie rowna temu co ma zostac usuniete jazda łogień
        if(todelete > searcher->data){                      // jesli to co jest do usuniecia jest wieksze od wartosci w biegaczu
            prev = searcher;                                // to zapisujemy wartosc biegacza do preva albo maratończyka 
            searcher = searcher->right;                     // i lecimy na prtawy element od biegacza
        }else if(todelete < searcher->data){                // natomiast jesli jest wartosc mniejsza lecimy na lewoo
            prev = searcher;                                //same
            searcher = searcher->left;                      //same tylko ze na lewo
        }
        if(searcher == NULL){                               // teraz jesli natrafimy na nulla i zadnych z poprzednich warunkow nie spelnilismy  
            cout << "nie ma tego elementu w drzewie";       // to odp znjduje sie po cou'cie
            return;                                         //wychodzimy bye bye
        }
    }
        if(searcher->left == NULL){                         // jesli lewywezel czy podwezel biegacza jest nulllerm 
            if(searcher->right == NULL){                     // i prawa stronka biegacza rowniez 
                if(prev->left == searcher){                 // i jesli lewa stronka poprzednika to jest biegacz
                    prev->left = NULL;                      // to usuwamy wskaznik na biegacza  
                    delete searcher;                        //usuwamy samego biegacza   
                }else if(prev->right == searcher){          // tak samo dla tylko dla prawej stronki
                    prev->right = NULL;                     //same  
                    delete searcher;                        //same
                }                                           
            }else{                                          //teraz to samo ttylko chyba jak cos tu jest naprawym podwezle
                if(prev->left == searcher){                 // a to jak wyzej
                    prev->left = searcher->right;           // tuprzekazujemy wartosc aby przeszla na miejsce biegacza(serchera)
                    delete searcher;                        //usuwamy jak widac
                }else if(prev->right == searcher){  
                    prev->right = searcher->right;         //tu przekazujemy wartosc z prawego wezla zeby przeszla na miejsce biegacza(serchera)
                    delete searcher;
                }
            }                                                   //UWAGA TERAZ SIE ZACZYNA KOSMOS KTORY JETS LATWY DO OGARNIECIA
        }else{                                                  //CHYBA ze cos sie znaduje na lewo ze tp juz nie jest null
            if(searcher->right == NULL){                        // ale na prawo nic nie ma  
                if(prev->left == searcher){                     // i na lewo sie znajduje biegacz   
                    prev->left = searcher->left;                // to na meijsce biegacza wkladamy  wartosc z lewej strony biegacza
                    delete searcher;
                }else if(prev->right == searcher){              // to samo tylko ze 
                    prev->right = searcher->left;               // ta sama zasada jak wczesniej tylkoo ze na prawo od preva
                    delete searcher;    
                }
            }else{                                              // teraz jesli na prawo cos jest od biegacza 
                if(searcher->right->left == NULL){              // no i teraz od biegacza na prawo w wezle na lewo nie ma nic   
                    node* pom = searcher->right;                // pomocnizy wskaznik robnimy ktory zawiera to co jest na prawo od 
                    searcher->data = searcher->right->data;     // wartosc biegaca  to wartosc prawego wezla  nadpisujemy wartosc
                    searcher->right = searcher->right->right;    // a praway adres biegacza to adres prawego wezła biegacza ale jego prawy adres
                    delete pom;                             
                }else{                                          // teraz jesli cos tam jest w sensie na prawo na lewo 
                    if(searcher->right->left->right == NULL){   // jesli  ciezko mi to wytlumaczyc pewnie juz rozumiesz
                        node* pom = searcher->right->left;      // to na rozrysowanie to jest ten algorytm
                        searcher->data = searcher->right->left->data;
                        searcher->right->left = NULL;
                        delete pom;
                    }else{                                   // to samo tylko jesli tu cos jest to trezba rozrysowac i tyle 
                        node* pom = searcher->right->left->right;
                        searcher->data = searcher->right->left->data;
                        searcher->right->left->data = searcher->right->left->right->data;
                        searcher->right->left->right = NULL;
                        delete pom;
                    }
                }
            }
        }
}
bool search (int tosearch, node* tree){                          // ogolnie tu szukamy liczby w drzewie 
    if(tree == NULL){                                           // jesli drzewo jest nullem to nie ma zadnych wartosci jest puste nie ma DRZEWAA isssEmptyy
        return false;                                           //zwracamy false bo nie ma drzewa
    }   
    while(tree != NULL){                                        // dopoki drzewo nie jest nullem lecimy po kolei
        if(tosearch == tree->data){                             // ogolnie liczba = wchodzimy w struturke treee i wyciagmy z niej 1 z 3 waertosci mianowice data
            return true;                                        // jezeli warunek ok no to super 
        }else if(tosearch > tree->data){                        // jesli nie to znowu porownujemy liczbe z = wartoscia w wezle
            tree = tree->right;                                 // jest wieksza ? lecimy z naszego wezla na prawo z nadzija ze w nastepnym ciegu peli spelni sie warunek nr 1
        }else if(tosearch < tree->data){                        // same tylko dla mniejszej liczby od liczby w wezle
            tree = tree->left;                                  // same jak dwie linijki wyzej tylko ze na lewo
        }   
    }
    return false;                                               // jesli dotrze na koniec i zakonczy petle bo natrafi na nulla to zwrtacmy false bo takiej liczby po prostu nie ma uzytkownik nie mysli
}                                                               // moze jak mu powiemy ze mozg to apka to zacznie go używać ;) Przepraszam musialam to napisac 
bool search_rec(int tosearch, node*tree){                       // ogolnie to jest to samo tylko wywolywanie funkcjido NATRAFIENIA NA nullalub wartosci ktorej szukamy chyba
    if(tree == NULL){                                           // same jak wyzej
        return false;                           
    }   
    if(tosearch == tree->data){                                 // same jak wyzej tylko ze ogolnie tu jest if bo tu warunek sprawdzamy mamy dwie opcje tylko
        return true;
    }
    if(tosearch > tree->data){                                  //to sa ogolnie te dwa warunki ktore nam robia za petle o to sie rozbiega
        search_rec(tosearch, tree->right);                      // wywolywanie znowu tej funkcji tylko zed wezel nam przechodzi na wezel ktory jest na PRAWO
    }else{      
        search_rec(tosearch, tree->left);                       // same tylko ze wezel przechodzi na ten wezel ktory jest na lewo
    }
}
void preorder(node* tree){                                      // rysowanie i tyle w skrocie szlaczek wolok wezlow 
    if(tree != NULL){                                           // pre kropa na lewo
        cout << tree->data << " ";                              // in kropa pod wezlem
        preorder(tree->left);                                   //post kropa pod wezlem
        preorder(tree->right);                                  // ogolnie to to retuje sobie sprytny c++ 
    }                                                           //  
}
void inorder(node* tree){
    if(tree != NULL){                                           // 
        inorder(tree->left);                                    // 
        cout << tree->data << " ";                              //  
        inorder(tree->right);                                   //
}
void postorder(node* tree){
    if(tree != NULL){
        postorder(tree->left);
        postorder(tree->right);
        cout << tree->data << " ";
    }
}
void show_rec(node* tree, int step = 0){
    if(tree!= NULL){
        for(int i = 0; i<step; i++){
            cout << " ";
        }
        cout << tree->data << endl;
        step++;
        show_rec(tree->left, step);
        show_rec(tree->right, step);
    }
}

int main()                                                       // no to jest main
{
    node* tree = NULL;                                           // tu sobie drzewko torzymy ktorej jjest aktualnie puste dalej dodajemy i wywolujemy poszczegolne funkcje
    add(250, tree);                                              // to tlumaczenie sobie daruje 
    add(270, tree);
    add(240, tree);
    add(225, tree);
    add(231, tree);
    add(226, tree);
    add(227, tree);
    add(232, tree);
    add(224, tree);
    show_rec(tree);
    cout << endl;
    delete_number(225,tree);
    show_rec(tree);
    /*cout << endl;
    preorder(tree);
    cout << endl;
    inorder(tree);
    cout << endl;
    postorder(tree);*/
}
