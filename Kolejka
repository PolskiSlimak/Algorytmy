struct elem{
    int dana;       // miejsce na przechowywanie danych zapamiÄ?tanych w danym elemencie
    elem* nast;     // wskaĹşnik na kolejny element kolejki
};

void add(elem* &pocz_kolejki, elem* &kon_kolejki, int x)
{
	elem* nowy = new elem();// Tworzymy nowy obiekt kolejki
	nowy->dana = x;//wkladamy dana 
	nowy->nast = NULL;//zerujemy nastepnika, bo polak tak chce
	if (kon_kolejki != NULL){//jezeli kolejny element istnieje...
		kon_kolejki->nast = nowy;//...to ma on pokazywac na nasz nowo utworzony obiekt
	}else{
		pocz_kolejki = nowy;//w innym przypadku nasz nowo utworzony obiekt jest poczatkiem kolejki
	}
	kon_kolejki = nowy;//nasz nowo utworzony obiekt jest koncem kolejki rowniez
}

int delLast(elem* &pocz_kolejki, elem* &kon_kolejki){
    elem *ptr=pocz_kolejki;
    while(ptr->nast!=kon_kolejki) 
        ptr=ptr->nast;
    int x=kon_kolejki->dana;
    delete kon_kolejki;
    kon_kolejki=ptr;
    kon_kolejki->next=NULL;
    return x;

int next(elem* &pocz_kolejki, elem* &kon_kolejki)
{
   if (!pocz_kolejki){//jezeli poczatek nie istnieje to piszemy po prostu error
   		cout << "Pusta kolejka!" << endl;
   		return;
   }else {
    	elem* stary = pocz_kolejki;//tworzymy pomocniczy wskaznik na poczatek kolejki
    	int dana = stary->dana; //pobieramy sobie dana z poczatku
	if(pocz_kolejki->nast)
    		pocz_kolejki = pocz_kolejki->nast;//ustawiamy zeby nasz poczatek pokazyal na drugi w kolejce obiekt (bo pierwszy usuwamy)
	else
		cout << "Kolejka jest jednoelementowa";
	delete stary;//usuwamy stary
    	return dana;//zwracamy wartosc pierwszego obiektu
   }
}

int firstEl(elem* pocz_kolejki)
{
	if (pocz_kolejki){
		return pocz_kolejki->dana;
	}
    return -1;
}

bool isEmpty(elem* pocz_kolejki)
{
   return !pocz_kolejki;
}
void show(elem* pocz_kolejki)
{
	elem* temp = pocz_kolejki;//tworzymy pomocniczy wskaznik na poczatek...
	while (temp != NULL){//...i dopoki on istnieje
		cout << "Liczba " << temp->dana << endl;//wyswietlamy nasza dana
		temp = temp->nast;	//i wchodzimy w nastepny obiekt w kolejce
	}
}
void show_rec(elem*pocz_kolejki){
    if(pocz_kolejki == NULL){
        return;
    }
    cout << "Liczba: " << pocz_kolejki->dana;
    show_rec(pocz_kolejki->nast);
}
//wyświetla od końca
void show(elem *first){
    if(!first){
       cout << "Kolejka jest pusta";
    }
    else{
        elem *ptr;
        while(first){
            ptr=first;
            while(ptr->next!=NULL){
                ptr=ptr->next;
            }
                cout << ptr->data;
        }
    }
}
/* void reverse_REC(elem * first){
if(!first){
	cout << " Kolejka jest pusta" << endl;
}
reverse_REC(first -> next);
cout << first -> data << " ";
*/
