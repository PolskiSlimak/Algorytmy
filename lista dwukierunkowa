#include <iostream>
#include <stdio.h>

using namespace std;

struct elem { //pojemnik na liczby
    int data;    
    elem* next; //tutaj zapisujemy adres kolejnego elementu listy
	elem* prev; //a tutaj poprzedniego
};

int how_many(elem* list){ //przekazujemy adres pierwszego elementu listy przez wartość (kopia, nie modyfikujemy tego adresu)
	int i = 0;
	while (list != NULL){ //sprawdzamy czy istnieje ten element
		list = list->next; //idziemy do kolejnego elementu, list równe kolejnemu elementowi
		i++;
	}
	return i;
}
void add_at_any_position(elem *&first, int x, int position){ //wstawiam z moimi nazwami zmiennych, bo nie chce mi się zmieniać ;)
    if(!first){ //jeśli lista nie istnieje
        elem *newElem=new elem;
        newElem->data=x;
        newElem->next=NULL;
        newElem->prev=NULL;
        first=newElem;
    }
    else if(first && position==1){ //jeśli chcemy wstawić po lewej stronie czyli na pierwszą pozycję
        elem *newElem=new elem;
        newElem->data=x;
        newElem->next=first;
        newElem->prev=NULL;
        first->prev=newElem;
        first=newElem;
    }
    else if(first && position>1){ //jeśli chcemy wstawić gdzieś w środku lub na końcu
        elem *newElem=new elem;
        newElem->data=x;
        elem *ptr=first;
        int counter=1;
        while(counter!=(position-1)){
            ptr=ptr->next;
            counter++;
            if(ptr=NULL){
                cout << "Lista jest za krótka";
                return;
            }
        }
        if(ptr->next=NULL){ //jeśli na końcu
            newElem->prev=ptr;
            newElem->next=NULL;
            ptr->next=newElem;
        }
        else{ //jeśli w środku
        ptr->next->prev=newElem;
        newElem->next=ptr->next;
        newElem->prev=ptr;
        ptr->next=newElem;}
    }
}

void deletee(int index, elem*& list){
	if(how_many(list) >= index){
		if(list->next == NULL){ //jeśli next jest pusty to lista jest jednoelementowa 
			list = NULL; //usuwamy ten pierwszy jedyny elemnt listy? potrzebne to jest?
			delete list; //a tutaj znowu usuwamy listę?
		}else if(index == 1){ //jeśli chcemy usunąć pierwszy element
			elem* helper = list->next; //wskaźnik na drugi element listy
			delete list; //usuwamy pierwszy element
			list = helper; //to co pokazuje helper staje się pierwszym elementem
			list->prev = NULL; //dlatego nie ma preva
		}else if(index > 1){
			int counter = 0;
			elem* erese = list; //wskaźnik na pierwszy element
			while(counter != (index-1)){ //erase zatrzyma się na elemencie, który chcemy ususnąć
				counter++;
				erese = erese->next;	
			}
			if(erese->next == NULL){ //jeśli jest to ostatni element listy
				elem * prevv = erese->prev; //wskaźnik na przedostatni element
				delete erese; //ten ostatni usuwamy		
				prevv->next = NULL; //a z przedostatniego usuwamy next
			}else{ //tutaj jeśli to jest jakiś element w środku
				erese->next->prev = erese->prev; //prev kolejnego elementu po tym usuwanym ustawiamy na ten obiekt przed usuwanym
				erese->prev->next = erese->next; //next elementu przed tym usuwanym ustawiamy na obiekt po usuwanym
				delete erese; //usuwamy 
			}		
		}
	
	}	
}

void showw (elem* list) { //tutaj wiadomo
    	while (list != NULL) {
    		cout << list->data << " ";
			list = list->next; 
		}
}

void reverse(elem* list){
	if (list == NULL){ //jak dojdziemy do końca
		return; //to return zaczyna zdejmować te reversy ze stosu
	}
	reverse(list->next); //wywołujemy tą metodę ale zawsze dla kolejnego elementu listy
	cout << list->data << " "; //zaczyna zdejmować od końca, więc mamy w odwrotnej kolejności

}
void reverse_usingprev(elem* list){
	elem* end = list;
	while (end->next != NULL){ //szukamy ostatniego elementu
		end = end->next;
	}
	while (end != NULL){ //jak jesteśmy na ostatnim elemencie 
		cout << end->data << " "; //to wypisujemy data 
		end = end->prev; //i lecimy do początku po wszystkich elementach wypisując po kolei
	}	
}
void convert (elem*& list){
	elem* last = list; //wskaźnik na pierwzy element
	while (last->next != NULL){ 
		last = last->next; //szukamy końca 
	}
	last->next = list; //next ostatniego elementu ustawiamy na pierwszy
	list->prev = last; //prev pierwszego ustawiamy na ostatni
}
int main()
{

	elem* newww = NULL;
	add_any_position(10, 1, newww);
	add_any_position(12, 2, newww);
	add_any_position(13, 2, newww);
	add_any_position(1000, 1, newww);
	add_any_position(20, 1, newww);
	add_any_position(30, 3, newww);
	add_any_position(31, 3, newww);
	add_any_position(14, 2, newww);
	showw(newww);
	deletee(8,newww);
	cout << endl;
	reverse(newww);
	deletee(6,newww);
	cout << endl;
	reverse_usingprev(newww);
	return 0;	
}
